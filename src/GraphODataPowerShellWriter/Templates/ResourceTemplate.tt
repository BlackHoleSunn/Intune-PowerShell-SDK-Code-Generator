<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.Graph.GraphODataPowerShellSDKWriter.Generator.Models" #>
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.

namespace PowerShellGraphSDK.PowerShellCmdlets
{
    using System.Management.Automation;
<#
foreach (Cmdlet cmdlet in resource.Cmdlets)
{ // Loop per cmdlet
#>

    [Cmdlet(
        "<#= cmdlet.Name.Verb #>", "<#= cmdlet.Name.Noun #>",
<#
    if (cmdlet.ImpactLevel != null)
    {
#>
        ConfirmImpact = (ConfirmImpact)<#= (int)cmdlet.ImpactLevel #>
<#
    }
#>
    )]
    public class <#= cmdlet.Name.Verb #>_<#= cmdlet.Name.Noun #> : <#= cmdlet.BaseType #>
    {
<#
    IDictionary<CmdletParameter, ICollection<CmdletParameterSet>> parameters = cmdlet.ParameterSets.GetParameters();
    foreach (KeyValuePair<CmdletParameter, ICollection<CmdletParameterSet>> entry in parameters)
    {
        CmdletParameter parameter = entry.Key;
        ICollection<CmdletParameterSet> parameterSets = entry.Value;
#>
        [Parameter(
            Mandatory = <#= parameter.IsMandatory.ToString().ToLower() #>,
<#
        if (parameterSets.First().Name != null)
        {
#>
            ParameterSetName = "<#= parameterSets.First().Name #>",
<#
        } // IF parameter name
#>
            ValueFromPipeline = true, ValueFromPipelineByPropertyName = true
        )]
        public <#= parameter.Type.FullName #> <#= parameter.Name #> { get; set; }

<#
    } // FOREACH parameter
#>
        internal override string GetResourcePath()
        {
            return $"<#= cmdlet.CallUrl #>";
        }
    }
<#
} // FOREACH cmdlet
#>
}
